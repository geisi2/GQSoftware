Aula 01 – 
           
➢ JAVA:          

-Revisão de Java;

• Introdução a Programação em Java;
• Estrutura Sequencial

https://drive.google.com/drive/folders/1C9QUvXBUjbUDbl0urwlttH_W1_w4EwbP


➢ REPOSITÓRIO:    

-Criar repositório;

• Git & GitHub Introdução 01

https://drive.google.com/drive/folders/1ISgMdunS9QXQ7w7-y2BOa6TdPVYW0_zd


➢ ATIVIDADE: 

• Pratica 02 

https://drive.google.com/drive/folders/1hX06w-8DqyRF-WPSExmmiDKLxTBA4Rws


Aula 02 –
 
➢ REPOSITÓRIO:   

- Criando pastas; dando comandos básicos como pull, push, add ., fetch, etc; 

- Aprendendo a criar um repositório e clonar o repositório remoto para o repositório local, fazer alterações no repositório remoto e mandar para local; 

- Aprendendo a alterar o diretório remoto e buscar o repositório local sem realizar o merge (git fetch – baixa as alterações que foram feitas no repositório remoto, mas não altera o estado do repositório local. 

- Aprendendo a alterar o diretório remoto e buscar o repositório local realizando o merge (git pull – baixa o conteúdo remoto e, de imediato, tenta alterar o estado local para que ele corresponda àquele conteúdo).

• Git & GitHub 02

https://drive.google.com/drive/folders/1ISgMdunS9QXQ7w7-y2BOa6TdPVYW0_zd

➢ JAVA: 

- Revisão de java;

• Estrutura Condicional 

https://drive.google.com/drive/folders/1C9QUvXBUjbUDbl0urwlttH_W1_w4EwbP




Aula 03 –
 
➢ REPOSITÓRIO:   


- Iniciar um repositório local e adiciona um arquivo no repositório local 

- Ver o histórico dos commits: git log; para filtrar por autor: git log --author="autor " ; para Exibir o grafo do histórico: git log –graph; para exibir um histórico resumido, lista os “commits” agrupados por autores: git shortlog; Exibe detalhes sobre um “commit” pelo identificador: git show + id. 

- Simular erro: executar commit sem antes o add antes; a staging área estará vazia. Quando isso acontecer, tem que fazer o git add mais documento modificado, para mandar o arquivo modificado para a staging área.

-  git diff exibe as alterações, diferenças, do arquivo antes que um “commit” seja executado. git diff --name-only exibe apenas o nome dos arquivos modificados.

- git remote associa um repositório local a um repositório remoto. git remote --v Lista detalhes sobre a associação criada.

- git push envia do repositório local para o repositório remoto. O -u é para não ter que informar “origin” e “master/main” nas próximas vezes que repositório local tiver que ser enviado para o repositório remoto.
origin: repositório remoto; master/main: para enviar do “branch” “master/main” local, para o “branch” “master/main” remoto.
Obs: Porem este comando funciona apenas se você clonou de um servidor em que você tem permissão para escrita e se mais ninguém enviou dados nesse meio tempo. Se não você terá que fazer um pull das modificações deste outro alguém e incorporá-las às suas, para que você tenha permissão
para enviá-las”.

- git fetch é para trazer o repositório remoto para o repositório local, sem realizar o “merge” dos “branchs”. 
Obs: busca qualquer novo trabalho que foi enviado para esse
servidor desde que você o clonou (ou fez a última busca). É importante notar que o comando fetch traz os dados para o seu repositório local. Você terá que fazer o merge manualmente no seu trabalho quando estiver
pronto”.

- git pull para trazer o repositório remoto para o repositório local, realizando o “merge” dos “branchs”.

- Arquivos listados dentro do arquivo “.gitignore” são ignorados pelo Git.

• Git & GitHub 03

https://drive.google.com/drive/folders/1ISgMdunS9QXQ7w7-y2BOa6TdPVYW0_zd


➢ JAVA: 

-Revisão de java;

• Estrutura de repetição (while e do while ) 

https://drive.google.com/drive/folders/1C9QUvXBUjbUDbl0urwlttH_W1_w4EwbP




Aula 04 –
 
➢ REPOSITÓRIO:   

- Criando uma nova pasta pelo repositório local (“mkdir” + “NomedaPasta”); dando comandos básicos como git status, git add .,git commit –m, git remote, git remote –v, etc;  

- Criar um arquivo de js e salvar no diretório; 

- Aprendendo a visualizar/listar as branchs do projeto (git branch –a). 

- git push -u origin master:master significa: git push -u origin <branch local>:<branch remoto>

- git checkout –b Criar uma nova branch (ramificação) e muda para essa branch 

- criar um arquivo css em outra branch e reportar para o repositório remoto usando a outra branch “develop” (git push --set-upstream origin develop)e também dá para fazer é dando um git checkout para voltar para a branch “mater” e da um git push normal.

• Git & GitHub 04

https://drive.google.com/drive/folders/1ISgMdunS9QXQ7w7-y2BOa6TdPVYW0_zd


➢ JAVA: 

-Revisão de java;

• Estrutura de repetição (for)
• Array

https://drive.google.com/drive/folders/1C9QUvXBUjbUDbl0urwlttH_W1_w4EwbP



Aula 05 –

➢ REPOSITÓRIO:   

* Criei outra pasta e ele será excluído, pois é algo que não deve evitar de fazer na prática, mas que é bom saber.

- Criar repositório remoto e um diretório local.

- Entrar no diretório e criar um arquivo txt usando o comando touch, e depois edita-lo com o comando code que irá abrir no visual studio.

- Executar os comandos básicos (add, commit -m, push e status )

- Criar novo arquivo no repositório remoto, fazer o git pull para mandar as alterações que foram feitas no remoto para o local.

* Aprender fazer um pull com repositórios com histórico de commits diferentes:

-Cria um novo diretório, e fazer os mesmos comandos de touch para criar e code para editar.

- Inicia um novo repositório, renomeia a branch (passa de máster para main) usando git branch -m main.

- Depois executa a url do seu repositório remoto (git remote add origin ‘+ URL’)

- Quando executar mensagem de erro ao mandar o git push e o git pull, e necessário executar o git pull origin main –allow-unrelated-histories que irá adicionar os repositórios com histórico de commits diferentes.

- Logo depois tem que executar o git push para mandar para o repositório local todas as alterações feitas, independentemente de ser ou não históricos de commits diferentes.

• Git & GitHub Introdução 05

https://drive.google.com/drive/folders/1ISgMdunS9QXQ7w7-y2BOa6TdPVYW0_zd


➢ JAVA: 

- Quanto mais coesão e menos acoplamento, temos um reaproveitamento de código maior. 

- Quando temos a passagem de parâmetros em um método qualquer, e adiciona valores no método main ele resultará como se fosse uma cópia passagem de parâmetros em um método qualquer.

- Em casos para otimizar espaço, porque guardar o endereço de memória ocupa menos espaço do computador do que copiar os dados. 

• Métodos: 

https://drive.google.com/drive/folders/1C9QUvXBUjbUDbl0urwlttH_W1_w4EwbP

Aula 06 –
 
➢ JAVA:

• Modularização
• Base da orientação a objetos;

https://drive.google.com/drive/folders/1C9QUvXBUjbUDbl0urwlttH_W1_w4EwbP



